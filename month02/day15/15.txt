前情回顾

1. 聊天室

   * 思考流程
   * 写一个功能测一个功能
     框架搭建
   * 总分形态-- 一处接收请求分情况讨论
   * 通信协议： 请求

2. 线程
   * 轻量级进程
   * 多任务编程运行过程 消耗资源
   * 一进程可包含多线程
   * 线程共享进程资源

3. threading

   写函数--》t = Thread() -》t.start()

   自定义线程类

4. 同步互斥  （全局变量）

   Event()   e.wait()  e.set() e.clear()
   Lock()  lock.acquire()  lock.release()



随堂训练： 基于现有的多进程并发模型完成多线程并发
模型，使用tcp_client测试
使用面向对象思想，基于class 完成

ftp 文件服务器
分为服务端和客户端，要求可以有多个客户端同时操作。
客户端可以查看服务器文件库中有什么文件。
客户端可以从文件库中下载文件到本地。
客户端可以上传一个本地文件到文件库。
使用print在客户端打印命令输入提示，引导操作

需求： C/S 见图

技术点整理 ： 网络  tcp
            并发  多线程
            文件网络传输   读 发送--》收 写入

功能模块划分 ：  类
   查看文件列表
   下载
   上传

网络通信协议：
request
                 请求类型     数据参数
   查看文件列表    LIST
   下载          GET/RETR    filename
   上传          PUT/STOR    filename
   退出           QUIT

response 响应: 根据请求处理情况返回给客户端的信息

                响应情况
   查看文件列表   OK    FAIL（文件库为空）
   下载          OK    FAIL
   上传          OK    FAIL


具体功能分析实现

   搭建框架模型： 服务端   客户端

   查看文件列表
        客户端

        服务端

   下载
       客户端 ： 输入文件名
                发送请求 --》GET filename
                接收响应
                OK  接收文件
                FAIL  功能结束

       服务端 ： 接收请求 解析
                根据情况（文件是否存在）发送响应
                OK ： 发送文件
                FAIL ： 结束功能


   上传

   退出


总结：
1. 线程 --> 死锁   GIL
2. 进程线程对比
3. 多进程和多线程并发模型 （重点）
4. FTP文件服务器 --》 通信协议中的响应
   回顾  vc

作业 ： 1. 重点代码自己梳理
       2. 完成 do_list功能