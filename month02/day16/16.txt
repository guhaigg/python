前情回顾

1. 线程
   死锁  GIL问题

2. 进程线程对比

3. 多进程多线程的并发网络模型

  循环模型 ： 同一时刻只能处理一个问题
  并发模型 ： 同时处理多个客户端请求

  多任务并发 ： 每当有一个客户端就创建一个进程/线程

4. ftp 文件服务器

   * 框架模型 ： 客户端框架模型 -》 类 MVC 跨类调用
   * 协议之 响应部分 ： 服务端处理结果多样

ftp 文件服务器
分为服务端和客户端，要求可以有多个客户端同时操作。
客户端可以查看服务器文件库中有什么文件。
客户端可以从文件库中下载文件到本地。
客户端可以上传一个本地文件到文件库。
使用print在客户端打印命令输入提示，引导操作

需求： C/S 见图

技术点整理 ： 网络  tcp
            并发  多线程
            文件网络传输   读 发送--》收 写入

功能模块划分 ：  类
   查看文件列表
   下载
   上传

网络通信协议：
request
                 请求类型     数据参数
   查看文件列表    LIST
   下载          GET/RETR    filename
   上传          PUT/STOR    filename
   退出           QUIT

response 响应: 根据请求处理情况返回给客户端的信息

                响应情况
   查看文件列表   OK    FAIL（文件库为空）
   下载          OK    FAIL
   上传          OK    FAIL


具体功能分析实现

   搭建框架模型： 服务端   客户端

   查看文件列表
        客户端 ：
                发送请求 --》LIST
                接收响应
                OK  接收文件列表
                FAIL  功能结束

       服务端 ： 接收请求 解析
                根据情况（文件库是否为空）发送响应
                OK ： 发送文件列表
                FAIL ： 结束功能

   下载
       客户端 ： 输入文件名
                发送请求 --》GET filename
                接收响应
                OK  接收文件
                FAIL  功能结束

       服务端 ： 接收请求 解析
                根据情况（文件是否存在）发送响应
                OK ： 发送文件
                FAIL ： 结束功能


   上传

   退出

优化完善


随堂修改 ： 将select_server.py 改写为使用
函数实现

随堂修改 ： 基于select_server思路流程，编写
一个使用epoll实现的server程序



cookie : 文件描述符
本质是一个>=0的整数，在linux下会给每个运行的
IO对象分配一个整数编号，就是文件描述符

特点 ： >=0     不重复
获取文件描述符 ： sock.fileno()


select  & epoll

select:
    支持系统全面
    同时监控IO数量有限
    相对效率一般

epoll:
    只支持 Linux
    同时监控的IO无限制
    效率优秀


总结 ：
   IO的概念
   阻塞IO  非阻塞IO
   IO多路复用 ：  select  epoll
   IO网络并发模型 （重点）

作业： 1. 重点代码独立梳理完成
      2. 使用类结构 改写epoll_server







